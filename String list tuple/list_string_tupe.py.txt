PS C:\Users\gaura> python
Python 3.12.4 (tags/v3.12.4:8e8a4ba, Jun  6 2024, 19:30:16) [MSC v.1940 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> a="sggs"
>>> dir(a)
['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'removeprefix', 'removesuffix', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']
>>> help(a.rstrip)
Help on built-in function rstrip:

rstrip(chars=None, /) method of builtins.str instance
    Return a copy of the string with trailing whitespace removed.

    If chars is given and not None, remove characters in chars instead.

>>> a=".......sggs"
>>> a.rstrip(".")
'.......sggs'
>>> a=".......sggs"
>>> a=".......sggs.............."
>>> a.rstrip(".")
'.......sggs'
>>> a="I like treee"
>>> a.rpartition("like")
('I ', 'like', ' treee')
>>> a="sggs"
>>> a.rjust(10,"O")
'OOOOOOsggs'
>>> txt="hello"
>>> txt.rindex("e:)
  File "<stdin>", line 1
    txt.rindex("e:)
               ^
SyntaxError: unterminated string literal (detected at line 1)
>>> txt.rindex("e")
1
>>> a.rindex("g")
2
>>> a="sggs"
>>> a.replace("s","l",1)
'lggs'
>>> a=['a','g','b']
>>> a.append("hello")
>>> print(a)
['a', 'g', 'b', 'hello']
>>> dir(a)
['__add__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getstate__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
>>> a.clear()
>>> print(a)
[]
>>> b=['a',1,5,'gaurav']
>>> print(b)
['a', 1, 5, 'gaurav']
>>> a=b.copy()
>>> print(a)
['a', 1, 5, 'gaurav']
>>> a=[[1,2,3,3,4]
... ]
>>> a=[1,2,3,3,4]
>>> a.count(3)
2
>>> a=[1,2,3,3,4]
>>> b=['s']
>>> a.extend(b)
>>> print(a)
[1, 2, 3, 3, 4, 's']
>>> a=[1,2,3]
>>> a.index(3)
2
>>> a=[1]
>>> a.insert(0,"s"]
  File "<stdin>", line 1
    a.insert(0,"s"]
                  ^
SyntaxError: closing parenthesis ']' does not match opening parenthesis '('
>>> a.insert(0,"s")
>>> print(a)
['s', 1]
>>> a.insert(1,"s")
>>> print(a)
['s', 's', 1]
>>> dir(a.remove)
['__call__', '__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__name__', '__ne__', '__new__', '__qualname__', '__reduce__', '__reduce_ex__', '__repr__', '__self__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__text_signature__']
>>> help(a.remove)
Help on built-in function remove:

remove(value, /) method of builtins.list instance
    Remove first occurrence of value.

    Raises ValueError if the value is not present.

>>>
>>> a=[1,23,5]
>>> a.remove(23)
>>> print(a)
[1, 5]
>>> a=(12,34,5)
>>> a.count(1)
0
>>> a.index(44)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: tuple.index(x): x not in tuple
>>> a.index(12)
0